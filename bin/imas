#!/bin/bash
#memo
# sed -i -e "s/^\(.*debug\)/#\1/g" imas 

PATH=$PATH
SHARE_PATH="/usr/local/share"
RBMAS_PATH="$SHARE_PATH/rubimas-master"
IDOL_YML="$RBMAS_PATH/config/idols.yml"

function parse_yaml () {
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s=\"%s\"\n", vn, $2, $3);
      }
   }'
   return 0
}


## File Check "rubimas"   Download
function firstdownload(){
	echo "GET = >" $RBMAS_PATH
	wget -q  https://github.com/imas/rubimas/archive/master.zip -P /tmp  # wget -q : 表示抑制
	unzip -q -d /usr/local/share/ /tmp/master.zip                        # unzip -q : 表示抑制  -d :出力ディレクトリ指定
	test -d $RBMAS_PATH || exti 1 
	echo ""
}



# echo function
function imasecho (){
    if [ $FLAG_P -eq "0" ] && [ $FLAG_m -eq "0" ] ; then
        P_NAME="プロデューサー"
	MESSAGE="アイマス"
    elif [ $FLAG_P -eq "0" ]  && [ $FLAG_m -eq "1" ] ; then
        P_NAME="プロデューサー"
    elif [ $FLAG_P -eq "1" ]  && [ $FLAG_m -eq "0" ] ; then
	MESSAGE="アイマス"
    fi

    echo "$P_NAME"'さん！ '"$MESSAGE"'ですよ！'"$MESSAGE"'！'
}


function imasgirls(){
    if [ $FLAG_n -eq "1" ] ;then

       ## idol_ymlから直接情報を取得し、idolの総数を取得
	GIRLS_ALL_NUM=$(cat $IDOL_YML | grep -E idol_id | tr -d "\""  |tr -d " "| wc -l )
	GIRLS_ALL_NUM=$(expr $GIRLS_ALL_NUM - 1)

       ## idol_id毎にフルネームを配列に入れていく
	GIRLS_NAME_LIST=($(cat $IDOL_YML | grep -E idol_id\|family:\|given:\|aka: | tr -d "\""  |tr -d " "| \
        awk -F":" '$1=="idol_id"{i=$2}$1=="family"{a[i]=$2}$1=="given"{b[i]=$2}$1=="aka"{a[i]=$2}END\
                   {for(j = 1; j <= i; j++){printf ("%s%s ",a[j],b[j])}}'))

        echo "idol_num" $GIRLS_ALL_NUM #debug

        ## 対象アイドルのidol_id を取得する
        for i in `seq 0 $GIRLS_ALL_NUM`;do 
#            j=$(expr $i + 1); echo "idol_id:"$j"=" ${GIRLS_NAME_LIST[$i]}  ; j=$(expr $i - 1) #debug
#            echo "NAME =" ${NAME} #debug
        	if [ "${GIRLS_NAME_LIST[$i]}" = "${NAME}" ] ; then
		    i=$(expr $i + 1)
            	    ## YMLをパース処理したものを利用して、対象アイドルの情報取得
        	    NAME_ID=$(parse_yaml $IDOL_YML  |grep idol_id|grep \"$i\" |cut -d"_" -f1)
                    echo "NAME_ID=""${NAME_ID}" #debug
                 # 出力形式は要修正箇所
        	    parse_yaml $IDOL_YML  |grep ${NAME_ID} 
                    break
		fi
        done    

    else
	cat $IDOL_YML | grep -E idol_id\|family:\|given:\|aka: | tr -d "\""  |tr -d " "| \
            awk -F":" '$1=="idol_id"{i=$2}$1=="family"{a[i]=$2}$1=="given"{b[i]=$2}$1=="aka"{a[i]=$2}END\
                       {for(j = 1; j <= i; j++){printf("%s%s\n",a[j],b[j])}}'
    fi
}


## USAGE ###
usage_exit() {
        echo "Usage: $0 item  [-P] [-m] [-s] [-n] " 1>&2
        echo " item list----------------------"
        echo "    cat  : [DONT]"
        echo "    grep : [DONT]idol grep"
        echo "    echo : Ano Serifu"
        echo "    call : [DONT]call and respons messages"
        echo "    girls : call and respons messages"
 #       echo "grep -f 'filename' : idol grep"
 #       echo "echo -P 'producer' -m  'message' : "
 #       echo "call -s 'song': "
        exit 1
}


# First ARG 
FLAG_CAT=0
FLAG_GREP=0
FLAG_ECHO=0
FLAG_CALL=0
FLAG_GIRLS=0

echo "First ARG--------------------------------------------" # debug
    case $1 in
        cat)    readonly FLAG_CAT=1
		echo "  CAT=" ${FLAG_CAT} # debug
		shift
            ;;
        grep)   readonly FLAG_GREP=1 
		echo "  GREP=" ${FLAG_GREP} # debug
		shift
            ;;
        echo)   readonly FLAG_ECHO=1
		echo "  ECHO=" ${FLAG_ECHO} # debug
		shift
            ;;
        call)   readonly FLAG_CALL=1
		echo "  CALL=" ${FLAG_CALL} # debug
		shift
            ;;
        girls)   readonly FLAG_GIRLS=1
		echo "  GIRLS=" ${FLAG_CALL} # debug
		shift
	   ;;
        \?) usage_exit
            ;;
    esac



## 2nd or later 
FLAG_P=0
FLAG_m=0
FLAG_s=0
FLAG_n=0
echo "2nd ARG later----------------------------------------" # debug
while getopts :P:m:c:n::h OPT
do
echo "OPT="$OPT
    case $OPT in
        P)  readonly FLAG_P=1
            readonly P_NAME=$OPTARG
		echo "  P=" ${FLAG_P}  # debug  
		echo "  P_NAME=" ${P_NAME} # debug
            ;;
        m)  readonly FLAG_m=1 
            readonly MESSAGE=$OPTARG
		echo "  m=" ${FLAG_m} # debug
		echo "  MESSAGE=" ${MESSAGE} # debug
            ;;
        s) readonly FLAG_s=1
              readonly SONGS=$OPTARG
		echo "  SONGS=" ${FLAG_SONGS} # debug
 	    ;;
        n) readonly FLAG_n=1
              readonly NAME=$OPTARG
		echo "  NAME=" ${NAME} # debug
 	    ;;
        \?) usage_exit
            ;;
    esac
done



echo ""
echo ""
echo ""
echo "[Main]-----------------------------------------------------"
echo ""



# Check rubimas dir 
test -d $RBMAS_PATH || firstdownload

    if [ $FLAG_CAT -eq "1" ] ; then
	imascat

    elif [ $FLAG_GREP -eq "1" ] ; then
	imasgrep

    elif [ $FLAG_ECHO -eq "1" ] ; then 
	imasecho

    elif [ $FLAG_CALL == "1" ] ; then
	imascall

    elif [ $FLAG_GIRLS == "1" ] ; then
	#cat $IDOL_YML | grep -E idol_id\|family:\|given: | tr -d "\""  |tr -d " "| awk -F":" '$1=="idol_id"{i=$2}$1=="family"{a[i]=$2}$1=="given"{b[i]=$2}END{for(j = 1; j <= i; j++){print a[j],b[j]}}'
	imasgirls
    else 
	usage_exit
    fi


echo ""
echo "[END Program]----------------------------------------------"
echo ""
